/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 * @format
 * @generated
 */

/*
 * !!! GENERATED FILE !!!
 *
 * Any manual changes to this file will be overwritten. To regenerate run `yarn build`.
 */

// lint directives to let us do some basic validation of generated files
/* eslint no-undef: 'error', no-unused-vars: ['error', {vars: "local"}], no-redeclare: 'error' */
/* global $NonMaybeType, Partial, $ReadOnly, $ReadOnlyArray, $FlowFixMe */

'use strict';

import type {
  ESNode,
  AnyTypeAnnotation,
  ArrayExpression,
  ArrayPattern,
  ArrayTypeAnnotation,
  ArrowFunctionExpression,
  AsConstExpression,
  AsExpression,
  AssignmentExpression,
  AssignmentPattern,
  AwaitExpression,
  BigIntLiteralTypeAnnotation,
  BigIntTypeAnnotation,
  BinaryExpression,
  BlockStatement,
  BooleanLiteralTypeAnnotation,
  BooleanTypeAnnotation,
  BreakStatement,
  CallExpression,
  CatchClause,
  ChainExpression,
  ClassBody,
  ClassDeclaration,
  ClassExpression,
  ClassImplements,
  ComponentDeclaration,
  ComponentParameter,
  ComponentTypeAnnotation,
  ComponentTypeParameter,
  ConditionalExpression,
  ConditionalTypeAnnotation,
  ContinueStatement,
  DebuggerStatement,
  DeclareClass,
  DeclareComponent,
  DeclaredPredicate,
  DeclareEnum,
  DeclareExportAllDeclaration,
  DeclareExportDeclaration,
  DeclareFunction,
  DeclareHook,
  DeclareInterface,
  DeclareModule,
  DeclareModuleExports,
  DeclareNamespace,
  DeclareOpaqueType,
  DeclareTypeAlias,
  DeclareVariable,
  DoWhileStatement,
  EmptyStatement,
  EmptyTypeAnnotation,
  EnumBigIntBody,
  EnumBigIntMember,
  EnumBooleanBody,
  EnumBooleanMember,
  EnumDeclaration,
  EnumDefaultedMember,
  EnumNumberBody,
  EnumNumberMember,
  EnumStringBody,
  EnumStringMember,
  EnumSymbolBody,
  ExistsTypeAnnotation,
  ExportAllDeclaration,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  ExportSpecifier,
  ExpressionStatement,
  ForInStatement,
  ForOfStatement,
  ForStatement,
  FunctionDeclaration,
  FunctionExpression,
  FunctionTypeAnnotation,
  FunctionTypeParam,
  GenericTypeAnnotation,
  HookDeclaration,
  HookTypeAnnotation,
  Identifier,
  IfStatement,
  ImportAttribute,
  ImportDeclaration,
  ImportDefaultSpecifier,
  ImportExpression,
  ImportNamespaceSpecifier,
  ImportSpecifier,
  IndexedAccessType,
  InferredPredicate,
  InferTypeAnnotation,
  InterfaceDeclaration,
  InterfaceExtends,
  InterfaceTypeAnnotation,
  IntersectionTypeAnnotation,
  JSXAttribute,
  JSXClosingElement,
  JSXClosingFragment,
  JSXElement,
  JSXEmptyExpression,
  JSXExpressionContainer,
  JSXFragment,
  JSXIdentifier,
  JSXMemberExpression,
  JSXNamespacedName,
  JSXOpeningElement,
  JSXOpeningFragment,
  JSXSpreadAttribute,
  JSXSpreadChild,
  JSXText,
  KeyofTypeAnnotation,
  LabeledStatement,
  LogicalExpression,
  MatchArrayPattern,
  MatchAsPattern,
  MatchBindingPattern,
  MatchExpression,
  MatchExpressionCase,
  MatchIdentifierPattern,
  MatchLiteralPattern,
  MatchMemberPattern,
  MatchObjectPattern,
  MatchObjectPatternProperty,
  MatchOrPattern,
  MatchRestPattern,
  MatchStatement,
  MatchStatementCase,
  MatchUnaryPattern,
  MatchWildcardPattern,
  MemberExpression,
  MetaProperty,
  MethodDefinition,
  MixedTypeAnnotation,
  NewExpression,
  NullableTypeAnnotation,
  NullLiteralTypeAnnotation,
  NumberLiteralTypeAnnotation,
  NumberTypeAnnotation,
  ObjectExpression,
  ObjectPattern,
  ObjectTypeAnnotation,
  ObjectTypeCallProperty,
  ObjectTypeIndexer,
  ObjectTypeInternalSlot,
  ObjectTypeMappedTypeProperty,
  ObjectTypeProperty,
  ObjectTypeSpreadProperty,
  OpaqueType,
  OptionalIndexedAccessType,
  PrivateIdentifier,
  Program,
  Property,
  PropertyDefinition,
  QualifiedTypeIdentifier,
  QualifiedTypeofIdentifier,
  RestElement,
  ReturnStatement,
  SequenceExpression,
  SpreadElement,
  StaticBlock,
  StringLiteralTypeAnnotation,
  StringTypeAnnotation,
  Super,
  SwitchCase,
  SwitchStatement,
  SymbolTypeAnnotation,
  TaggedTemplateExpression,
  TemplateElement,
  TemplateLiteral,
  ThisExpression,
  ThisTypeAnnotation,
  ThrowStatement,
  TryStatement,
  TupleTypeAnnotation,
  TupleTypeLabeledElement,
  TupleTypeSpreadElement,
  TypeAlias,
  TypeAnnotation,
  TypeCastExpression,
  TypeofTypeAnnotation,
  TypeOperator,
  TypeParameter,
  TypeParameterDeclaration,
  TypeParameterInstantiation,
  TypePredicate,
  UnaryExpression,
  UnionTypeAnnotation,
  UpdateExpression,
  VariableDeclaration,
  VariableDeclarator,
  Variance,
  VoidTypeAnnotation,
  WhileStatement,
  WithStatement,
  YieldExpression,
  Literal,
} from '../types';

interface ArrayExpression_With_elements extends ArrayExpression {
  +elements: $NonMaybeType<ArrayExpression['elements']>;
}
interface ArrayExpression_With_trailingComma extends ArrayExpression {
  +trailingComma: $NonMaybeType<ArrayExpression['trailingComma']>;
}
interface ArrayPattern_With_elements extends ArrayPattern {
  +elements: $NonMaybeType<ArrayPattern['elements']>;
}
interface ArrayPattern_With_typeAnnotation extends ArrayPattern {
  +typeAnnotation: $NonMaybeType<ArrayPattern['typeAnnotation']>;
}
interface ArrayTypeAnnotation_With_elementType extends ArrayTypeAnnotation {
  +elementType: $NonMaybeType<ArrayTypeAnnotation['elementType']>;
}
interface ArrowFunctionExpression_With_id extends ArrowFunctionExpression {
  +id: $NonMaybeType<ArrowFunctionExpression['id']>;
}
interface ArrowFunctionExpression_With_params extends ArrowFunctionExpression {
  +params: $NonMaybeType<ArrowFunctionExpression['params']>;
}
interface ArrowFunctionExpression_With_body extends ArrowFunctionExpression {
  +body: $NonMaybeType<ArrowFunctionExpression['body']>;
}
interface ArrowFunctionExpression_With_typeParameters
  extends ArrowFunctionExpression {
  +typeParameters: $NonMaybeType<ArrowFunctionExpression['typeParameters']>;
}
interface ArrowFunctionExpression_With_returnType
  extends ArrowFunctionExpression {
  +returnType: $NonMaybeType<ArrowFunctionExpression['returnType']>;
}
interface ArrowFunctionExpression_With_predicate
  extends ArrowFunctionExpression {
  +predicate: $NonMaybeType<ArrowFunctionExpression['predicate']>;
}
interface ArrowFunctionExpression_With_expression
  extends ArrowFunctionExpression {
  +expression: $NonMaybeType<ArrowFunctionExpression['expression']>;
}
interface ArrowFunctionExpression_With_async extends ArrowFunctionExpression {
  +async: $NonMaybeType<ArrowFunctionExpression['async']>;
}
interface AsConstExpression_With_expression extends AsConstExpression {
  +expression: $NonMaybeType<AsConstExpression['expression']>;
}
interface AsExpression_With_expression extends AsExpression {
  +expression: $NonMaybeType<AsExpression['expression']>;
}
interface AsExpression_With_typeAnnotation extends AsExpression {
  +typeAnnotation: $NonMaybeType<AsExpression['typeAnnotation']>;
}
interface AssignmentExpression_With_operator extends AssignmentExpression {
  +operator: $NonMaybeType<AssignmentExpression['operator']>;
}
interface AssignmentExpression_With_left extends AssignmentExpression {
  +left: $NonMaybeType<AssignmentExpression['left']>;
}
interface AssignmentExpression_With_right extends AssignmentExpression {
  +right: $NonMaybeType<AssignmentExpression['right']>;
}
interface AssignmentPattern_With_left extends AssignmentPattern {
  +left: $NonMaybeType<AssignmentPattern['left']>;
}
interface AssignmentPattern_With_right extends AssignmentPattern {
  +right: $NonMaybeType<AssignmentPattern['right']>;
}
interface AwaitExpression_With_argument extends AwaitExpression {
  +argument: $NonMaybeType<AwaitExpression['argument']>;
}
interface BigIntLiteralTypeAnnotation_With_raw
  extends BigIntLiteralTypeAnnotation {
  +raw: $NonMaybeType<BigIntLiteralTypeAnnotation['raw']>;
}
interface BinaryExpression_With_left extends BinaryExpression {
  +left: $NonMaybeType<BinaryExpression['left']>;
}
interface BinaryExpression_With_right extends BinaryExpression {
  +right: $NonMaybeType<BinaryExpression['right']>;
}
interface BinaryExpression_With_operator extends BinaryExpression {
  +operator: $NonMaybeType<BinaryExpression['operator']>;
}
interface BlockStatement_With_body extends BlockStatement {
  +body: $NonMaybeType<BlockStatement['body']>;
}
interface BlockStatement_With_implicit extends BlockStatement {
  +implicit: $NonMaybeType<BlockStatement['implicit']>;
}
interface BooleanLiteralTypeAnnotation_With_value
  extends BooleanLiteralTypeAnnotation {
  +value: $NonMaybeType<BooleanLiteralTypeAnnotation['value']>;
}
interface BooleanLiteralTypeAnnotation_With_raw
  extends BooleanLiteralTypeAnnotation {
  +raw: $NonMaybeType<BooleanLiteralTypeAnnotation['raw']>;
}
interface BreakStatement_With_label extends BreakStatement {
  +label: $NonMaybeType<BreakStatement['label']>;
}
interface CallExpression_With_callee extends CallExpression {
  +callee: $NonMaybeType<CallExpression['callee']>;
}
interface CallExpression_With_typeArguments extends CallExpression {
  +typeArguments: $NonMaybeType<CallExpression['typeArguments']>;
}
interface CallExpression_With_arguments extends CallExpression {
  +arguments: $NonMaybeType<CallExpression['arguments']>;
}
interface CatchClause_With_param extends CatchClause {
  +param: $NonMaybeType<CatchClause['param']>;
}
interface CatchClause_With_body extends CatchClause {
  +body: $NonMaybeType<CatchClause['body']>;
}
interface ChainExpression_With_expression extends ChainExpression {
  +expression: $NonMaybeType<ChainExpression['expression']>;
}
interface ClassBody_With_body extends ClassBody {
  +body: $NonMaybeType<ClassBody['body']>;
}
interface ClassDeclaration_With_id extends ClassDeclaration {
  +id: $NonMaybeType<ClassDeclaration['id']>;
}
interface ClassDeclaration_With_typeParameters extends ClassDeclaration {
  +typeParameters: $NonMaybeType<ClassDeclaration['typeParameters']>;
}
interface ClassDeclaration_With_superClass extends ClassDeclaration {
  +superClass: $NonMaybeType<ClassDeclaration['superClass']>;
}
interface ClassDeclaration_With_superTypeParameters extends ClassDeclaration {
  +superTypeParameters: $NonMaybeType<ClassDeclaration['superTypeParameters']>;
}
interface ClassDeclaration_With_implements extends ClassDeclaration {
  +implements: $NonMaybeType<ClassDeclaration['implements']>;
}
interface ClassDeclaration_With_decorators extends ClassDeclaration {
  +decorators: $NonMaybeType<ClassDeclaration['decorators']>;
}
interface ClassDeclaration_With_body extends ClassDeclaration {
  +body: $NonMaybeType<ClassDeclaration['body']>;
}
interface ClassExpression_With_id extends ClassExpression {
  +id: $NonMaybeType<ClassExpression['id']>;
}
interface ClassExpression_With_typeParameters extends ClassExpression {
  +typeParameters: $NonMaybeType<ClassExpression['typeParameters']>;
}
interface ClassExpression_With_superClass extends ClassExpression {
  +superClass: $NonMaybeType<ClassExpression['superClass']>;
}
interface ClassExpression_With_superTypeParameters extends ClassExpression {
  +superTypeParameters: $NonMaybeType<ClassExpression['superTypeParameters']>;
}
interface ClassExpression_With_implements extends ClassExpression {
  +implements: $NonMaybeType<ClassExpression['implements']>;
}
interface ClassExpression_With_decorators extends ClassExpression {
  +decorators: $NonMaybeType<ClassExpression['decorators']>;
}
interface ClassExpression_With_body extends ClassExpression {
  +body: $NonMaybeType<ClassExpression['body']>;
}
interface ClassImplements_With_id extends ClassImplements {
  +id: $NonMaybeType<ClassImplements['id']>;
}
interface ClassImplements_With_typeParameters extends ClassImplements {
  +typeParameters: $NonMaybeType<ClassImplements['typeParameters']>;
}
interface ComponentDeclaration_With_id extends ComponentDeclaration {
  +id: $NonMaybeType<ComponentDeclaration['id']>;
}
interface ComponentDeclaration_With_params extends ComponentDeclaration {
  +params: $NonMaybeType<ComponentDeclaration['params']>;
}
interface ComponentDeclaration_With_body extends ComponentDeclaration {
  +body: $NonMaybeType<ComponentDeclaration['body']>;
}
interface ComponentDeclaration_With_typeParameters
  extends ComponentDeclaration {
  +typeParameters: $NonMaybeType<ComponentDeclaration['typeParameters']>;
}
interface ComponentDeclaration_With_rendersType extends ComponentDeclaration {
  +rendersType: $NonMaybeType<ComponentDeclaration['rendersType']>;
}
interface ComponentParameter_With_name extends ComponentParameter {
  +name: $NonMaybeType<ComponentParameter['name']>;
}
interface ComponentParameter_With_local extends ComponentParameter {
  +local: $NonMaybeType<ComponentParameter['local']>;
}
interface ComponentParameter_With_shorthand extends ComponentParameter {
  +shorthand: $NonMaybeType<ComponentParameter['shorthand']>;
}
interface ComponentTypeAnnotation_With_params extends ComponentTypeAnnotation {
  +params: $NonMaybeType<ComponentTypeAnnotation['params']>;
}
interface ComponentTypeAnnotation_With_rest extends ComponentTypeAnnotation {
  +rest: $NonMaybeType<ComponentTypeAnnotation['rest']>;
}
interface ComponentTypeAnnotation_With_typeParameters
  extends ComponentTypeAnnotation {
  +typeParameters: $NonMaybeType<ComponentTypeAnnotation['typeParameters']>;
}
interface ComponentTypeAnnotation_With_rendersType
  extends ComponentTypeAnnotation {
  +rendersType: $NonMaybeType<ComponentTypeAnnotation['rendersType']>;
}
interface ComponentTypeParameter_With_name extends ComponentTypeParameter {
  +name: $NonMaybeType<ComponentTypeParameter['name']>;
}
interface ComponentTypeParameter_With_typeAnnotation
  extends ComponentTypeParameter {
  +typeAnnotation: $NonMaybeType<ComponentTypeParameter['typeAnnotation']>;
}
interface ComponentTypeParameter_With_optional extends ComponentTypeParameter {
  +optional: $NonMaybeType<ComponentTypeParameter['optional']>;
}
interface ConditionalExpression_With_test extends ConditionalExpression {
  +test: $NonMaybeType<ConditionalExpression['test']>;
}
interface ConditionalExpression_With_alternate extends ConditionalExpression {
  +alternate: $NonMaybeType<ConditionalExpression['alternate']>;
}
interface ConditionalExpression_With_consequent extends ConditionalExpression {
  +consequent: $NonMaybeType<ConditionalExpression['consequent']>;
}
interface ConditionalTypeAnnotation_With_checkType
  extends ConditionalTypeAnnotation {
  +checkType: $NonMaybeType<ConditionalTypeAnnotation['checkType']>;
}
interface ConditionalTypeAnnotation_With_extendsType
  extends ConditionalTypeAnnotation {
  +extendsType: $NonMaybeType<ConditionalTypeAnnotation['extendsType']>;
}
interface ConditionalTypeAnnotation_With_trueType
  extends ConditionalTypeAnnotation {
  +trueType: $NonMaybeType<ConditionalTypeAnnotation['trueType']>;
}
interface ConditionalTypeAnnotation_With_falseType
  extends ConditionalTypeAnnotation {
  +falseType: $NonMaybeType<ConditionalTypeAnnotation['falseType']>;
}
interface ContinueStatement_With_label extends ContinueStatement {
  +label: $NonMaybeType<ContinueStatement['label']>;
}
interface DeclareClass_With_id extends DeclareClass {
  +id: $NonMaybeType<DeclareClass['id']>;
}
interface DeclareClass_With_typeParameters extends DeclareClass {
  +typeParameters: $NonMaybeType<DeclareClass['typeParameters']>;
}
interface DeclareClass_With_extends extends DeclareClass {
  +extends: $NonMaybeType<DeclareClass['extends']>;
}
interface DeclareClass_With_implements extends DeclareClass {
  +implements: $NonMaybeType<DeclareClass['implements']>;
}
interface DeclareClass_With_mixins extends DeclareClass {
  +mixins: $NonMaybeType<DeclareClass['mixins']>;
}
interface DeclareClass_With_body extends DeclareClass {
  +body: $NonMaybeType<DeclareClass['body']>;
}
interface DeclareComponent_With_id extends DeclareComponent {
  +id: $NonMaybeType<DeclareComponent['id']>;
}
interface DeclareComponent_With_params extends DeclareComponent {
  +params: $NonMaybeType<DeclareComponent['params']>;
}
interface DeclareComponent_With_rest extends DeclareComponent {
  +rest: $NonMaybeType<DeclareComponent['rest']>;
}
interface DeclareComponent_With_typeParameters extends DeclareComponent {
  +typeParameters: $NonMaybeType<DeclareComponent['typeParameters']>;
}
interface DeclareComponent_With_rendersType extends DeclareComponent {
  +rendersType: $NonMaybeType<DeclareComponent['rendersType']>;
}
interface DeclaredPredicate_With_value extends DeclaredPredicate {
  +value: $NonMaybeType<DeclaredPredicate['value']>;
}
interface DeclareEnum_With_id extends DeclareEnum {
  +id: $NonMaybeType<DeclareEnum['id']>;
}
interface DeclareEnum_With_body extends DeclareEnum {
  +body: $NonMaybeType<DeclareEnum['body']>;
}
interface DeclareExportAllDeclaration_With_source
  extends DeclareExportAllDeclaration {
  +source: $NonMaybeType<DeclareExportAllDeclaration['source']>;
}
interface DeclareExportDeclaration_With_declaration
  extends DeclareExportDeclaration {
  +declaration: $NonMaybeType<DeclareExportDeclaration['declaration']>;
}
interface DeclareExportDeclaration_With_specifiers
  extends DeclareExportDeclaration {
  +specifiers: $NonMaybeType<DeclareExportDeclaration['specifiers']>;
}
interface DeclareExportDeclaration_With_source
  extends DeclareExportDeclaration {
  +source: $NonMaybeType<DeclareExportDeclaration['source']>;
}
interface DeclareExportDeclaration_With_default
  extends DeclareExportDeclaration {
  +default: $NonMaybeType<DeclareExportDeclaration['default']>;
}
interface DeclareFunction_With_id extends DeclareFunction {
  +id: $NonMaybeType<DeclareFunction['id']>;
}
interface DeclareFunction_With_predicate extends DeclareFunction {
  +predicate: $NonMaybeType<DeclareFunction['predicate']>;
}
interface DeclareHook_With_id extends DeclareHook {
  +id: $NonMaybeType<DeclareHook['id']>;
}
interface DeclareInterface_With_id extends DeclareInterface {
  +id: $NonMaybeType<DeclareInterface['id']>;
}
interface DeclareInterface_With_typeParameters extends DeclareInterface {
  +typeParameters: $NonMaybeType<DeclareInterface['typeParameters']>;
}
interface DeclareInterface_With_extends extends DeclareInterface {
  +extends: $NonMaybeType<DeclareInterface['extends']>;
}
interface DeclareInterface_With_body extends DeclareInterface {
  +body: $NonMaybeType<DeclareInterface['body']>;
}
interface DeclareModule_With_id extends DeclareModule {
  +id: $NonMaybeType<DeclareModule['id']>;
}
interface DeclareModule_With_body extends DeclareModule {
  +body: $NonMaybeType<DeclareModule['body']>;
}
interface DeclareModuleExports_With_typeAnnotation
  extends DeclareModuleExports {
  +typeAnnotation: $NonMaybeType<DeclareModuleExports['typeAnnotation']>;
}
interface DeclareNamespace_With_id extends DeclareNamespace {
  +id: $NonMaybeType<DeclareNamespace['id']>;
}
interface DeclareNamespace_With_body extends DeclareNamespace {
  +body: $NonMaybeType<DeclareNamespace['body']>;
}
interface DeclareOpaqueType_With_id extends DeclareOpaqueType {
  +id: $NonMaybeType<DeclareOpaqueType['id']>;
}
interface DeclareOpaqueType_With_typeParameters extends DeclareOpaqueType {
  +typeParameters: $NonMaybeType<DeclareOpaqueType['typeParameters']>;
}
interface DeclareOpaqueType_With_impltype extends DeclareOpaqueType {
  +impltype: $NonMaybeType<DeclareOpaqueType['impltype']>;
}
interface DeclareOpaqueType_With_supertype extends DeclareOpaqueType {
  +supertype: $NonMaybeType<DeclareOpaqueType['supertype']>;
}
interface DeclareTypeAlias_With_id extends DeclareTypeAlias {
  +id: $NonMaybeType<DeclareTypeAlias['id']>;
}
interface DeclareTypeAlias_With_typeParameters extends DeclareTypeAlias {
  +typeParameters: $NonMaybeType<DeclareTypeAlias['typeParameters']>;
}
interface DeclareTypeAlias_With_right extends DeclareTypeAlias {
  +right: $NonMaybeType<DeclareTypeAlias['right']>;
}
interface DeclareVariable_With_id extends DeclareVariable {
  +id: $NonMaybeType<DeclareVariable['id']>;
}
interface DeclareVariable_With_kind extends DeclareVariable {
  +kind: $NonMaybeType<DeclareVariable['kind']>;
}
interface DoWhileStatement_With_body extends DoWhileStatement {
  +body: $NonMaybeType<DoWhileStatement['body']>;
}
interface DoWhileStatement_With_test extends DoWhileStatement {
  +test: $NonMaybeType<DoWhileStatement['test']>;
}
interface EnumBigIntBody_With_members extends EnumBigIntBody {
  +members: $NonMaybeType<EnumBigIntBody['members']>;
}
interface EnumBigIntBody_With_explicitType extends EnumBigIntBody {
  +explicitType: $NonMaybeType<EnumBigIntBody['explicitType']>;
}
interface EnumBigIntBody_With_hasUnknownMembers extends EnumBigIntBody {
  +hasUnknownMembers: $NonMaybeType<EnumBigIntBody['hasUnknownMembers']>;
}
interface EnumBigIntMember_With_id extends EnumBigIntMember {
  +id: $NonMaybeType<EnumBigIntMember['id']>;
}
interface EnumBigIntMember_With_init extends EnumBigIntMember {
  +init: $NonMaybeType<EnumBigIntMember['init']>;
}
interface EnumBooleanBody_With_members extends EnumBooleanBody {
  +members: $NonMaybeType<EnumBooleanBody['members']>;
}
interface EnumBooleanBody_With_explicitType extends EnumBooleanBody {
  +explicitType: $NonMaybeType<EnumBooleanBody['explicitType']>;
}
interface EnumBooleanBody_With_hasUnknownMembers extends EnumBooleanBody {
  +hasUnknownMembers: $NonMaybeType<EnumBooleanBody['hasUnknownMembers']>;
}
interface EnumBooleanMember_With_id extends EnumBooleanMember {
  +id: $NonMaybeType<EnumBooleanMember['id']>;
}
interface EnumBooleanMember_With_init extends EnumBooleanMember {
  +init: $NonMaybeType<EnumBooleanMember['init']>;
}
interface EnumDeclaration_With_id extends EnumDeclaration {
  +id: $NonMaybeType<EnumDeclaration['id']>;
}
interface EnumDeclaration_With_body extends EnumDeclaration {
  +body: $NonMaybeType<EnumDeclaration['body']>;
}
interface EnumDefaultedMember_With_id extends EnumDefaultedMember {
  +id: $NonMaybeType<EnumDefaultedMember['id']>;
}
interface EnumNumberBody_With_members extends EnumNumberBody {
  +members: $NonMaybeType<EnumNumberBody['members']>;
}
interface EnumNumberBody_With_explicitType extends EnumNumberBody {
  +explicitType: $NonMaybeType<EnumNumberBody['explicitType']>;
}
interface EnumNumberBody_With_hasUnknownMembers extends EnumNumberBody {
  +hasUnknownMembers: $NonMaybeType<EnumNumberBody['hasUnknownMembers']>;
}
interface EnumNumberMember_With_id extends EnumNumberMember {
  +id: $NonMaybeType<EnumNumberMember['id']>;
}
interface EnumNumberMember_With_init extends EnumNumberMember {
  +init: $NonMaybeType<EnumNumberMember['init']>;
}
interface EnumStringBody_With_members extends EnumStringBody {
  +members: $NonMaybeType<EnumStringBody['members']>;
}
interface EnumStringBody_With_explicitType extends EnumStringBody {
  +explicitType: $NonMaybeType<EnumStringBody['explicitType']>;
}
interface EnumStringBody_With_hasUnknownMembers extends EnumStringBody {
  +hasUnknownMembers: $NonMaybeType<EnumStringBody['hasUnknownMembers']>;
}
interface EnumStringMember_With_id extends EnumStringMember {
  +id: $NonMaybeType<EnumStringMember['id']>;
}
interface EnumStringMember_With_init extends EnumStringMember {
  +init: $NonMaybeType<EnumStringMember['init']>;
}
interface EnumSymbolBody_With_members extends EnumSymbolBody {
  +members: $NonMaybeType<EnumSymbolBody['members']>;
}
interface EnumSymbolBody_With_hasUnknownMembers extends EnumSymbolBody {
  +hasUnknownMembers: $NonMaybeType<EnumSymbolBody['hasUnknownMembers']>;
}
interface ExportAllDeclaration_With_exported extends ExportAllDeclaration {
  +exported: $NonMaybeType<ExportAllDeclaration['exported']>;
}
interface ExportAllDeclaration_With_source extends ExportAllDeclaration {
  +source: $NonMaybeType<ExportAllDeclaration['source']>;
}
interface ExportAllDeclaration_With_exportKind extends ExportAllDeclaration {
  +exportKind: $NonMaybeType<ExportAllDeclaration['exportKind']>;
}
interface ExportDefaultDeclaration_With_declaration
  extends ExportDefaultDeclaration {
  +declaration: $NonMaybeType<ExportDefaultDeclaration['declaration']>;
}
interface ExportNamedDeclaration_With_declaration
  extends ExportNamedDeclaration {
  +declaration: $NonMaybeType<ExportNamedDeclaration['declaration']>;
}
interface ExportNamedDeclaration_With_specifiers
  extends ExportNamedDeclaration {
  +specifiers: $NonMaybeType<ExportNamedDeclaration['specifiers']>;
}
interface ExportNamedDeclaration_With_source extends ExportNamedDeclaration {
  +source: $NonMaybeType<ExportNamedDeclaration['source']>;
}
interface ExportNamedDeclaration_With_exportKind
  extends ExportNamedDeclaration {
  +exportKind: $NonMaybeType<ExportNamedDeclaration['exportKind']>;
}
interface ExportSpecifier_With_exported extends ExportSpecifier {
  +exported: $NonMaybeType<ExportSpecifier['exported']>;
}
interface ExportSpecifier_With_local extends ExportSpecifier {
  +local: $NonMaybeType<ExportSpecifier['local']>;
}
interface ExpressionStatement_With_expression extends ExpressionStatement {
  +expression: $NonMaybeType<ExpressionStatement['expression']>;
}
interface ExpressionStatement_With_directive extends ExpressionStatement {
  +directive: $NonMaybeType<ExpressionStatement['directive']>;
}
interface ForInStatement_With_left extends ForInStatement {
  +left: $NonMaybeType<ForInStatement['left']>;
}
interface ForInStatement_With_right extends ForInStatement {
  +right: $NonMaybeType<ForInStatement['right']>;
}
interface ForInStatement_With_body extends ForInStatement {
  +body: $NonMaybeType<ForInStatement['body']>;
}
interface ForOfStatement_With_left extends ForOfStatement {
  +left: $NonMaybeType<ForOfStatement['left']>;
}
interface ForOfStatement_With_right extends ForOfStatement {
  +right: $NonMaybeType<ForOfStatement['right']>;
}
interface ForOfStatement_With_body extends ForOfStatement {
  +body: $NonMaybeType<ForOfStatement['body']>;
}
interface ForOfStatement_With_await extends ForOfStatement {
  +await: $NonMaybeType<ForOfStatement['await']>;
}
interface ForStatement_With_init extends ForStatement {
  +init: $NonMaybeType<ForStatement['init']>;
}
interface ForStatement_With_test extends ForStatement {
  +test: $NonMaybeType<ForStatement['test']>;
}
interface ForStatement_With_update extends ForStatement {
  +update: $NonMaybeType<ForStatement['update']>;
}
interface ForStatement_With_body extends ForStatement {
  +body: $NonMaybeType<ForStatement['body']>;
}
interface FunctionDeclaration_With_id extends FunctionDeclaration {
  +id: $NonMaybeType<FunctionDeclaration['id']>;
}
interface FunctionDeclaration_With_params extends FunctionDeclaration {
  +params: $NonMaybeType<FunctionDeclaration['params']>;
}
interface FunctionDeclaration_With_body extends FunctionDeclaration {
  +body: $NonMaybeType<FunctionDeclaration['body']>;
}
interface FunctionDeclaration_With_typeParameters extends FunctionDeclaration {
  +typeParameters: $NonMaybeType<FunctionDeclaration['typeParameters']>;
}
interface FunctionDeclaration_With_returnType extends FunctionDeclaration {
  +returnType: $NonMaybeType<FunctionDeclaration['returnType']>;
}
interface FunctionDeclaration_With_predicate extends FunctionDeclaration {
  +predicate: $NonMaybeType<FunctionDeclaration['predicate']>;
}
interface FunctionDeclaration_With_generator extends FunctionDeclaration {
  +generator: $NonMaybeType<FunctionDeclaration['generator']>;
}
interface FunctionDeclaration_With_async extends FunctionDeclaration {
  +async: $NonMaybeType<FunctionDeclaration['async']>;
}
interface FunctionExpression_With_id extends FunctionExpression {
  +id: $NonMaybeType<FunctionExpression['id']>;
}
interface FunctionExpression_With_params extends FunctionExpression {
  +params: $NonMaybeType<FunctionExpression['params']>;
}
interface FunctionExpression_With_body extends FunctionExpression {
  +body: $NonMaybeType<FunctionExpression['body']>;
}
interface FunctionExpression_With_typeParameters extends FunctionExpression {
  +typeParameters: $NonMaybeType<FunctionExpression['typeParameters']>;
}
interface FunctionExpression_With_returnType extends FunctionExpression {
  +returnType: $NonMaybeType<FunctionExpression['returnType']>;
}
interface FunctionExpression_With_predicate extends FunctionExpression {
  +predicate: $NonMaybeType<FunctionExpression['predicate']>;
}
interface FunctionExpression_With_generator extends FunctionExpression {
  +generator: $NonMaybeType<FunctionExpression['generator']>;
}
interface FunctionExpression_With_async extends FunctionExpression {
  +async: $NonMaybeType<FunctionExpression['async']>;
}
interface FunctionTypeAnnotation_With_params extends FunctionTypeAnnotation {
  +params: $NonMaybeType<FunctionTypeAnnotation['params']>;
}
interface FunctionTypeAnnotation_With_this extends FunctionTypeAnnotation {
  +this: $NonMaybeType<FunctionTypeAnnotation['this']>;
}
interface FunctionTypeAnnotation_With_returnType
  extends FunctionTypeAnnotation {
  +returnType: $NonMaybeType<FunctionTypeAnnotation['returnType']>;
}
interface FunctionTypeAnnotation_With_rest extends FunctionTypeAnnotation {
  +rest: $NonMaybeType<FunctionTypeAnnotation['rest']>;
}
interface FunctionTypeAnnotation_With_typeParameters
  extends FunctionTypeAnnotation {
  +typeParameters: $NonMaybeType<FunctionTypeAnnotation['typeParameters']>;
}
interface FunctionTypeParam_With_name extends FunctionTypeParam {
  +name: $NonMaybeType<FunctionTypeParam['name']>;
}
interface FunctionTypeParam_With_typeAnnotation extends FunctionTypeParam {
  +typeAnnotation: $NonMaybeType<FunctionTypeParam['typeAnnotation']>;
}
interface FunctionTypeParam_With_optional extends FunctionTypeParam {
  +optional: $NonMaybeType<FunctionTypeParam['optional']>;
}
interface GenericTypeAnnotation_With_id extends GenericTypeAnnotation {
  +id: $NonMaybeType<GenericTypeAnnotation['id']>;
}
interface GenericTypeAnnotation_With_typeParameters
  extends GenericTypeAnnotation {
  +typeParameters: $NonMaybeType<GenericTypeAnnotation['typeParameters']>;
}
interface HookDeclaration_With_id extends HookDeclaration {
  +id: $NonMaybeType<HookDeclaration['id']>;
}
interface HookDeclaration_With_params extends HookDeclaration {
  +params: $NonMaybeType<HookDeclaration['params']>;
}
interface HookDeclaration_With_body extends HookDeclaration {
  +body: $NonMaybeType<HookDeclaration['body']>;
}
interface HookDeclaration_With_typeParameters extends HookDeclaration {
  +typeParameters: $NonMaybeType<HookDeclaration['typeParameters']>;
}
interface HookDeclaration_With_returnType extends HookDeclaration {
  +returnType: $NonMaybeType<HookDeclaration['returnType']>;
}
interface HookTypeAnnotation_With_params extends HookTypeAnnotation {
  +params: $NonMaybeType<HookTypeAnnotation['params']>;
}
interface HookTypeAnnotation_With_returnType extends HookTypeAnnotation {
  +returnType: $NonMaybeType<HookTypeAnnotation['returnType']>;
}
interface HookTypeAnnotation_With_rest extends HookTypeAnnotation {
  +rest: $NonMaybeType<HookTypeAnnotation['rest']>;
}
interface HookTypeAnnotation_With_typeParameters extends HookTypeAnnotation {
  +typeParameters: $NonMaybeType<HookTypeAnnotation['typeParameters']>;
}
interface Identifier_With_name extends Identifier {
  +name: $NonMaybeType<Identifier['name']>;
}
interface Identifier_With_typeAnnotation extends Identifier {
  +typeAnnotation: $NonMaybeType<Identifier['typeAnnotation']>;
}
interface Identifier_With_optional extends Identifier {
  +optional: $NonMaybeType<Identifier['optional']>;
}
interface IfStatement_With_test extends IfStatement {
  +test: $NonMaybeType<IfStatement['test']>;
}
interface IfStatement_With_consequent extends IfStatement {
  +consequent: $NonMaybeType<IfStatement['consequent']>;
}
interface IfStatement_With_alternate extends IfStatement {
  +alternate: $NonMaybeType<IfStatement['alternate']>;
}
interface ImportAttribute_With_key extends ImportAttribute {
  +key: $NonMaybeType<ImportAttribute['key']>;
}
interface ImportAttribute_With_value extends ImportAttribute {
  +value: $NonMaybeType<ImportAttribute['value']>;
}
interface ImportDeclaration_With_specifiers extends ImportDeclaration {
  +specifiers: $NonMaybeType<ImportDeclaration['specifiers']>;
}
interface ImportDeclaration_With_source extends ImportDeclaration {
  +source: $NonMaybeType<ImportDeclaration['source']>;
}
interface ImportDeclaration_With_assertions extends ImportDeclaration {
  +assertions: $NonMaybeType<ImportDeclaration['assertions']>;
}
interface ImportDeclaration_With_importKind extends ImportDeclaration {
  +importKind: $NonMaybeType<ImportDeclaration['importKind']>;
}
interface ImportDefaultSpecifier_With_local extends ImportDefaultSpecifier {
  +local: $NonMaybeType<ImportDefaultSpecifier['local']>;
}
interface ImportExpression_With_source extends ImportExpression {
  +source: $NonMaybeType<ImportExpression['source']>;
}
interface ImportExpression_With_options extends ImportExpression {
  +options: $NonMaybeType<ImportExpression['options']>;
}
interface ImportNamespaceSpecifier_With_local extends ImportNamespaceSpecifier {
  +local: $NonMaybeType<ImportNamespaceSpecifier['local']>;
}
interface ImportSpecifier_With_imported extends ImportSpecifier {
  +imported: $NonMaybeType<ImportSpecifier['imported']>;
}
interface ImportSpecifier_With_local extends ImportSpecifier {
  +local: $NonMaybeType<ImportSpecifier['local']>;
}
interface ImportSpecifier_With_importKind extends ImportSpecifier {
  +importKind: $NonMaybeType<ImportSpecifier['importKind']>;
}
interface IndexedAccessType_With_objectType extends IndexedAccessType {
  +objectType: $NonMaybeType<IndexedAccessType['objectType']>;
}
interface IndexedAccessType_With_indexType extends IndexedAccessType {
  +indexType: $NonMaybeType<IndexedAccessType['indexType']>;
}
interface InferTypeAnnotation_With_typeParameter extends InferTypeAnnotation {
  +typeParameter: $NonMaybeType<InferTypeAnnotation['typeParameter']>;
}
interface InterfaceDeclaration_With_id extends InterfaceDeclaration {
  +id: $NonMaybeType<InterfaceDeclaration['id']>;
}
interface InterfaceDeclaration_With_typeParameters
  extends InterfaceDeclaration {
  +typeParameters: $NonMaybeType<InterfaceDeclaration['typeParameters']>;
}
interface InterfaceDeclaration_With_extends extends InterfaceDeclaration {
  +extends: $NonMaybeType<InterfaceDeclaration['extends']>;
}
interface InterfaceDeclaration_With_body extends InterfaceDeclaration {
  +body: $NonMaybeType<InterfaceDeclaration['body']>;
}
interface InterfaceExtends_With_id extends InterfaceExtends {
  +id: $NonMaybeType<InterfaceExtends['id']>;
}
interface InterfaceExtends_With_typeParameters extends InterfaceExtends {
  +typeParameters: $NonMaybeType<InterfaceExtends['typeParameters']>;
}
interface InterfaceTypeAnnotation_With_extends extends InterfaceTypeAnnotation {
  +extends: $NonMaybeType<InterfaceTypeAnnotation['extends']>;
}
interface InterfaceTypeAnnotation_With_body extends InterfaceTypeAnnotation {
  +body: $NonMaybeType<InterfaceTypeAnnotation['body']>;
}
interface IntersectionTypeAnnotation_With_types
  extends IntersectionTypeAnnotation {
  +types: $NonMaybeType<IntersectionTypeAnnotation['types']>;
}
interface JSXAttribute_With_name extends JSXAttribute {
  +name: $NonMaybeType<JSXAttribute['name']>;
}
interface JSXAttribute_With_value extends JSXAttribute {
  +value: $NonMaybeType<JSXAttribute['value']>;
}
interface JSXClosingElement_With_name extends JSXClosingElement {
  +name: $NonMaybeType<JSXClosingElement['name']>;
}
interface JSXElement_With_openingElement extends JSXElement {
  +openingElement: $NonMaybeType<JSXElement['openingElement']>;
}
interface JSXElement_With_children extends JSXElement {
  +children: $NonMaybeType<JSXElement['children']>;
}
interface JSXElement_With_closingElement extends JSXElement {
  +closingElement: $NonMaybeType<JSXElement['closingElement']>;
}
interface JSXExpressionContainer_With_expression
  extends JSXExpressionContainer {
  +expression: $NonMaybeType<JSXExpressionContainer['expression']>;
}
interface JSXFragment_With_openingFragment extends JSXFragment {
  +openingFragment: $NonMaybeType<JSXFragment['openingFragment']>;
}
interface JSXFragment_With_children extends JSXFragment {
  +children: $NonMaybeType<JSXFragment['children']>;
}
interface JSXFragment_With_closingFragment extends JSXFragment {
  +closingFragment: $NonMaybeType<JSXFragment['closingFragment']>;
}
interface JSXIdentifier_With_name extends JSXIdentifier {
  +name: $NonMaybeType<JSXIdentifier['name']>;
}
interface JSXMemberExpression_With_object extends JSXMemberExpression {
  +object: $NonMaybeType<JSXMemberExpression['object']>;
}
interface JSXMemberExpression_With_property extends JSXMemberExpression {
  +property: $NonMaybeType<JSXMemberExpression['property']>;
}
interface JSXNamespacedName_With_namespace extends JSXNamespacedName {
  +namespace: $NonMaybeType<JSXNamespacedName['namespace']>;
}
interface JSXNamespacedName_With_name extends JSXNamespacedName {
  +name: $NonMaybeType<JSXNamespacedName['name']>;
}
interface JSXOpeningElement_With_name extends JSXOpeningElement {
  +name: $NonMaybeType<JSXOpeningElement['name']>;
}
interface JSXOpeningElement_With_attributes extends JSXOpeningElement {
  +attributes: $NonMaybeType<JSXOpeningElement['attributes']>;
}
interface JSXOpeningElement_With_selfClosing extends JSXOpeningElement {
  +selfClosing: $NonMaybeType<JSXOpeningElement['selfClosing']>;
}
interface JSXOpeningElement_With_typeArguments extends JSXOpeningElement {
  +typeArguments: $NonMaybeType<JSXOpeningElement['typeArguments']>;
}
interface JSXSpreadAttribute_With_argument extends JSXSpreadAttribute {
  +argument: $NonMaybeType<JSXSpreadAttribute['argument']>;
}
interface JSXSpreadChild_With_expression extends JSXSpreadChild {
  +expression: $NonMaybeType<JSXSpreadChild['expression']>;
}
interface JSXText_With_value extends JSXText {
  +value: $NonMaybeType<JSXText['value']>;
}
interface JSXText_With_raw extends JSXText {
  +raw: $NonMaybeType<JSXText['raw']>;
}
interface KeyofTypeAnnotation_With_argument extends KeyofTypeAnnotation {
  +argument: $NonMaybeType<KeyofTypeAnnotation['argument']>;
}
interface LabeledStatement_With_label extends LabeledStatement {
  +label: $NonMaybeType<LabeledStatement['label']>;
}
interface LabeledStatement_With_body extends LabeledStatement {
  +body: $NonMaybeType<LabeledStatement['body']>;
}
interface LogicalExpression_With_left extends LogicalExpression {
  +left: $NonMaybeType<LogicalExpression['left']>;
}
interface LogicalExpression_With_right extends LogicalExpression {
  +right: $NonMaybeType<LogicalExpression['right']>;
}
interface LogicalExpression_With_operator extends LogicalExpression {
  +operator: $NonMaybeType<LogicalExpression['operator']>;
}
interface MatchArrayPattern_With_elements extends MatchArrayPattern {
  +elements: $NonMaybeType<MatchArrayPattern['elements']>;
}
interface MatchArrayPattern_With_rest extends MatchArrayPattern {
  +rest: $NonMaybeType<MatchArrayPattern['rest']>;
}
interface MatchAsPattern_With_pattern extends MatchAsPattern {
  +pattern: $NonMaybeType<MatchAsPattern['pattern']>;
}
interface MatchAsPattern_With_target extends MatchAsPattern {
  +target: $NonMaybeType<MatchAsPattern['target']>;
}
interface MatchBindingPattern_With_id extends MatchBindingPattern {
  +id: $NonMaybeType<MatchBindingPattern['id']>;
}
interface MatchBindingPattern_With_kind extends MatchBindingPattern {
  +kind: $NonMaybeType<MatchBindingPattern['kind']>;
}
interface MatchExpression_With_argument extends MatchExpression {
  +argument: $NonMaybeType<MatchExpression['argument']>;
}
interface MatchExpression_With_cases extends MatchExpression {
  +cases: $NonMaybeType<MatchExpression['cases']>;
}
interface MatchExpressionCase_With_pattern extends MatchExpressionCase {
  +pattern: $NonMaybeType<MatchExpressionCase['pattern']>;
}
interface MatchExpressionCase_With_body extends MatchExpressionCase {
  +body: $NonMaybeType<MatchExpressionCase['body']>;
}
interface MatchExpressionCase_With_guard extends MatchExpressionCase {
  +guard: $NonMaybeType<MatchExpressionCase['guard']>;
}
interface MatchIdentifierPattern_With_id extends MatchIdentifierPattern {
  +id: $NonMaybeType<MatchIdentifierPattern['id']>;
}
interface MatchLiteralPattern_With_literal extends MatchLiteralPattern {
  +literal: $NonMaybeType<MatchLiteralPattern['literal']>;
}
interface MatchMemberPattern_With_base extends MatchMemberPattern {
  +base: $NonMaybeType<MatchMemberPattern['base']>;
}
interface MatchMemberPattern_With_property extends MatchMemberPattern {
  +property: $NonMaybeType<MatchMemberPattern['property']>;
}
interface MatchObjectPattern_With_properties extends MatchObjectPattern {
  +properties: $NonMaybeType<MatchObjectPattern['properties']>;
}
interface MatchObjectPattern_With_rest extends MatchObjectPattern {
  +rest: $NonMaybeType<MatchObjectPattern['rest']>;
}
interface MatchObjectPatternProperty_With_key
  extends MatchObjectPatternProperty {
  +key: $NonMaybeType<MatchObjectPatternProperty['key']>;
}
interface MatchObjectPatternProperty_With_pattern
  extends MatchObjectPatternProperty {
  +pattern: $NonMaybeType<MatchObjectPatternProperty['pattern']>;
}
interface MatchObjectPatternProperty_With_shorthand
  extends MatchObjectPatternProperty {
  +shorthand: $NonMaybeType<MatchObjectPatternProperty['shorthand']>;
}
interface MatchOrPattern_With_patterns extends MatchOrPattern {
  +patterns: $NonMaybeType<MatchOrPattern['patterns']>;
}
interface MatchRestPattern_With_argument extends MatchRestPattern {
  +argument: $NonMaybeType<MatchRestPattern['argument']>;
}
interface MatchStatement_With_argument extends MatchStatement {
  +argument: $NonMaybeType<MatchStatement['argument']>;
}
interface MatchStatement_With_cases extends MatchStatement {
  +cases: $NonMaybeType<MatchStatement['cases']>;
}
interface MatchStatementCase_With_pattern extends MatchStatementCase {
  +pattern: $NonMaybeType<MatchStatementCase['pattern']>;
}
interface MatchStatementCase_With_body extends MatchStatementCase {
  +body: $NonMaybeType<MatchStatementCase['body']>;
}
interface MatchStatementCase_With_guard extends MatchStatementCase {
  +guard: $NonMaybeType<MatchStatementCase['guard']>;
}
interface MatchUnaryPattern_With_argument extends MatchUnaryPattern {
  +argument: $NonMaybeType<MatchUnaryPattern['argument']>;
}
interface MatchUnaryPattern_With_operator extends MatchUnaryPattern {
  +operator: $NonMaybeType<MatchUnaryPattern['operator']>;
}
interface MemberExpression_With_object extends MemberExpression {
  +object: $NonMaybeType<MemberExpression['object']>;
}
interface MemberExpression_With_property extends MemberExpression {
  +property: $NonMaybeType<MemberExpression['property']>;
}
interface MemberExpression_With_computed extends MemberExpression {
  +computed: $NonMaybeType<MemberExpression['computed']>;
}
interface MetaProperty_With_meta extends MetaProperty {
  +meta: $NonMaybeType<MetaProperty['meta']>;
}
interface MetaProperty_With_property extends MetaProperty {
  +property: $NonMaybeType<MetaProperty['property']>;
}
interface MethodDefinition_With_key extends MethodDefinition {
  +key: $NonMaybeType<MethodDefinition['key']>;
}
interface MethodDefinition_With_value extends MethodDefinition {
  +value: $NonMaybeType<MethodDefinition['value']>;
}
interface MethodDefinition_With_kind extends MethodDefinition {
  +kind: $NonMaybeType<MethodDefinition['kind']>;
}
interface MethodDefinition_With_computed extends MethodDefinition {
  +computed: $NonMaybeType<MethodDefinition['computed']>;
}
interface MethodDefinition_With_static extends MethodDefinition {
  +